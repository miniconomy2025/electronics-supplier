CREATE OR REPLACE PROCEDURE complete_material_order(
    IN p_order_id INT
) LANGUAGE plpgsql AS $$
DECLARE
    v_material_id INT;
    v_amount INT;
BEGIN
    -- Validate the order exists
    IF p_order_id IS NULL OR NOT EXISTS (SELECT 1 FROM material_orders WHERE order_id = p_order_id) THEN
        RAISE EXCEPTION 'Material order ID % does not exist', p_order_id;
    END IF;

    -- Check if already completed
    IF (SELECT received_at FROM material_orders WHERE order_id = p_order_id) IS NOT NULL THEN
        RAISE EXCEPTION 'Material order % is already completed', p_order_id;
    END IF;

    -- Get material ID and remaining amount
    SELECT material_id, remaining_amount INTO v_material_id, v_amount
    FROM material_orders
    WHERE order_id = p_order_id;

    -- Validate remaining amount
    IF v_amount <= 0 THEN
        RAISE EXCEPTION 'Remaining amount for order % must be positive', p_order_id;
    END IF;

    -- Mark order as received
    UPDATE material_orders
    SET received_at = NOW()
    WHERE order_id = p_order_id;

<<<<<<< HEAD:esAPI/Migrations/V4__Special_Updates.sql.ignore
    -- For each item, add to supplies
    FOR rec IN SELECT material_id, quantity_kg FROM material_order_items WHERE order_id = p_order_id LOOP
        INSERT INTO material_supplies (material_id, received_at, processed_at)
        SELECT rec.material_id, NOW(), NULL FROM generate_series(1, rec.quantity_kg);
    END LOOP;
=======
    -- Insert that many supply rows
    INSERT INTO supplies (material_id, received_at, processed_at)
    SELECT v_material_id, NOW(), NULL
    FROM generate_series(1, v_amount);
>>>>>>> d36f86e28ae5cae41c0ce64ec7a87996439cbd88:esAPI/Migrations/V4__Special_Updates.sql

    RAISE NOTICE 'Material order % completed and % supplies created for material %',
        p_order_id, v_amount, v_material_id;

EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error completing material order: %', SQLERRM;

END;
$$;

CREATE OR REPLACE PROCEDURE complete_machine_order(
    IN p_order_id INT,
    IN p_purchase_price FLOAT
) LANGUAGE plpgsql AS $$
DECLARE
    v_supplier_id INT;
    v_ordered_at TIMESTAMPTZ;
BEGIN

    IF p_order_id IS NULL OR NOT EXISTS (SELECT 1 FROM machine_orders WHERE order_id = p_order_id) THEN
        RAISE EXCEPTION 'Machine order ID % does not exist', p_order_id;
    END IF;

    IF (SELECT received_at FROM machine_orders WHERE order_id = p_order_id) IS NOT NULL THEN
        RAISE EXCEPTION 'Machine order % is already completed', p_order_id;
    END IF;

    IF p_purchase_price IS NULL OR p_purchase_price <= 0 THEN
        RAISE EXCEPTION 'Purchase price must be greater than 0';
    END IF;

    SELECT supplier_id, placed_at INTO v_supplier_id, v_ordered_at FROM machine_orders WHERE order_id = p_order_id;

    -- Mark order as received and store purchase price
    UPDATE machine_orders SET received_at = NOW() WHERE order_id = p_order_id;

    -- Insert new machine
    INSERT INTO machines (machine_status, purchase_price, purchased_at, order_id) VALUES (1, p_purchase_price, NOW(), p_order_id);

    RAISE NOTICE 'Machine order % completed and machine added', p_order_id;

EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error completing machine order: %', SQLERRM;

END;
$$;

CREATE OR REPLACE PROCEDURE process_electronics_order(
    IN p_order_id INT
) LANGUAGE plpgsql AS $$
DECLARE
    v_remaining INT;
    v_count INT;
BEGIN

    -- Validate the order exists
    IF p_order_id IS NULL OR NOT EXISTS (
        SELECT 1 FROM electronics_orders WHERE order_id = p_order_id
    ) THEN
        RAISE EXCEPTION 'Electronics order ID % does not exist', p_order_id;
    END IF;

    -- Check if already processed
    IF (SELECT processed_at FROM electronics_orders WHERE order_id = p_order_id) IS NOT NULL THEN
        RAISE EXCEPTION 'Electronics order % is already processed', p_order_id;
    END IF;

    -- Get remaining amount
    SELECT remaining_amount INTO v_remaining FROM electronics_orders WHERE order_id = p_order_id;

    IF v_remaining <= 0 THEN
        RAISE EXCEPTION 'Electronics order % has no remaining items to process', p_order_id;
    END IF;

    -- Mark unsold electronics as sold
    UPDATE electronics
    SET sold_at = NOW()
    WHERE electronic_id IN (
        SELECT electronic_id FROM electronics
        WHERE sold_at IS NULL
        ORDER BY produced_at
        LIMIT v_remaining
    );

    GET DIAGNOSTICS v_count = ROW_COUNT;

    -- Update the order
    UPDATE electronics_orders
    SET processed_at = NOW(),
        remaining_amount = GREATEST(v_remaining - v_count, 0)
    WHERE order_id = p_order_id;

    IF v_count < v_remaining THEN
        RAISE NOTICE 'Only % out of % electronics were marked as sold (not enough stock)', v_count, v_remaining;
    ELSE
        RAISE NOTICE 'All % electronics sold for order %', v_count, p_order_id;
    END IF;

EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error processing electronics order: %', SQLERRM;

END;
$$;
