name: "Integration Tests"

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run integration tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: integrationtest
          POSTGRES_DB: integration_test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        # Apply migrations to test database
        dotnet ef database update --project esAPI --startup-project esAPI \
          --connection "Host=localhost;Port=5432;Database=integration_test_db;Username=postgres;Password=integrationtest"

    - name: Run integration tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=integration_test_db;Username=postgres;Password=integrationtest"
        ExternalApis__CommercialBank: "https://httpbin.org/status/200"
        ExternalApis__BulkLogistics: "https://httpbin.org/status/200" 
        ExternalApis__THOH: "https://httpbin.org/status/200"
        ExternalApis__Recycler: "https://httpbin.org/status/200"
        ASPNETCORE_ENVIRONMENT: "Testing"
      run: |
        dotnet test --configuration Release --no-build \
          --logger trx --logger "console;verbosity=detailed" \
          --results-directory ./TestResults \
          --filter "Category=Integration" \
          --collect:"XPlat Code Coverage" \
          --settings CodeCoverage.runsettings

    - name: API Health Check Tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=integration_test_db;Username=postgres;Password=integrationtest"
        ExternalApis__CommercialBank: "https://httpbin.org/status/200"
        ExternalApis__BulkLogistics: "https://httpbin.org/status/200"
        ExternalApis__THOH: "https://httpbin.org/status/200" 
        ExternalApis__Recycler: "https://httpbin.org/status/200"
      run: |
        # Start the API in background
        dotnet run --project esAPI --configuration Release &
        API_PID=$!
        
        # Wait for API to start
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -s http://localhost:5000/health >/dev/null 2>&1; then
            echo "‚úÖ API is responding"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå API failed to start within timeout"
            exit 1
          fi
          sleep 2
        done

        # Run API health checks
        echo "üîç Running API health checks..."
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        echo "‚úÖ Health endpoint working"
        
        # Test ready endpoint  
        curl -f http://localhost:5000/ready || exit 1
        echo "‚úÖ Ready endpoint working"
        
        # Test database connectivity
        curl -f http://localhost:5000/health/db || exit 1
        echo "‚úÖ Database connectivity working"
        
        # Cleanup
        kill $API_PID || true

    - name: External API Integration Tests
      run: |
        echo "üîó Testing external API configurations..."
        
        # Test each configured external API endpoint
        apis=(
          "CommercialBank:https://commercial-bank-api.subspace.site/api"
          "BulkLogistics:https://team7-todo.xyz/api"
          "THOH:https://ec2-13-244-65-62.af-south-1.compute.amazonaws.com"
          "Recycler:https://api.recycler.susnet.co.za"
        )
        
        for api in "${apis[@]}"; do
          name=$(echo $api | cut -d: -f1)
          url=$(echo $api | cut -d: -f2-)
          
          echo "Testing $name at $url..."
          if curl -s --max-time 10 "$url" >/dev/null 2>&1; then
            echo "‚úÖ $name is reachable"
          else
            echo "‚ö†Ô∏è $name is not reachable (may be expected in test environment)"
          fi
        done

    - name: Database Integration Tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=integration_test_db;Username=postgres;Password=integrationtest"
      run: |
        echo "üóÑÔ∏è Running database integration tests..."
        
        # Test database schema
        psql "host=localhost port=5432 dbname=integration_test_db user=postgres password=integrationtest" -c "\dt" || exit 1
        echo "‚úÖ Database schema exists"
        
        # Test basic CRUD operations would go here
        # This would typically involve running specific integration test classes

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          ./TestResults/*.trx
          ./TestResults/CoverageReport/

    - name: Publish integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Test Results
        path: './TestResults/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for Newman
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Newman (Postman CLI)
      run: npm install -g newman newman-reporter-htmlextra

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build and start API
      env:
        ASPNETCORE_ENVIRONMENT: "Testing"
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=contract_test_db;Username=postgres;Password=contracttest"
        ExternalApis__CommercialBank: "https://httpbin.org/status/200"
        ExternalApis__BulkLogistics: "https://httpbin.org/status/200"
        ExternalApis__THOH: "https://httpbin.org/status/200"
        ExternalApis__Recycler: "https://httpbin.org/status/200"
      run: |
        dotnet build --configuration Release
        
        # Start API in background (we'll use in-memory DB for contract tests)
        dotnet run --project esAPI --configuration Release &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Wait for API
        for i in {1..30}; do
          if curl -s http://localhost:5000/health >/dev/null 2>&1; then
            echo "‚úÖ API ready for contract tests"
            break
          fi
          sleep 2
        done

    - name: Run API contract tests
      run: |
        echo "üìã Running API contract tests..."
        
        # Test API endpoints are available and return expected structure
        endpoints=(
          "GET:/health"
          "GET:/ready" 
          "GET:/api/electronics"
          "GET:/api/inventory"
          "GET:/api/dashboard/status"
        )
        
        for endpoint in "${endpoints[@]}"; do
          method=$(echo $endpoint | cut -d: -f1)
          path=$(echo $endpoint | cut -d: -f2)
          
          echo "Testing $method $path..."
          response=$(curl -s -X $method -w "%{http_code}" http://localhost:5000$path)
          http_code="${response: -3}"
          
          if [[ "$http_code" =~ ^(200|401|403)$ ]]; then
            echo "‚úÖ $method $path returned expected status: $http_code"
          else
            echo "‚ùå $method $path returned unexpected status: $http_code"
            exit 1
          fi
        done

    - name: Test OpenAPI/Swagger
      run: |
        echo "üìñ Testing OpenAPI documentation..."
        
        # Test Swagger endpoint
        if curl -f http://localhost:5000/swagger/v1/swagger.json >/dev/null 2>&1; then
          echo "‚úÖ OpenAPI specification is available"
          
          # Download and validate OpenAPI spec
          curl -s http://localhost:5000/swagger/v1/swagger.json > openapi.json
          
          # Basic validation - check it's valid JSON and has required fields
          if jq -e '.info.title' openapi.json >/dev/null 2>&1; then
            echo "‚úÖ OpenAPI specification is valid"
          else
            echo "‚ùå OpenAPI specification is invalid"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è OpenAPI specification not available (may be disabled in this environment)"
        fi

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$API_PID" ]; then
          kill $API_PID || true
        fi